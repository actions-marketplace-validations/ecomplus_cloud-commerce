---
import type { PageContext } from '../ssr-context';
import Color from 'color';
import '../../assets/pico.css';

export interface Props {
  pageContext: PageContext;
}

const { pageContext } = Astro.props as Props;
const { primaryColor, secondaryColor } = pageContext;
const brandColors = {
  primary: primaryColor,
  secondary: secondaryColor,
  ...globalThis.storefront_brand_colors,
};
const colorVariants = {
  '50':  -0.75, // whiter
  '100': -0.5,  // white
  '200': -0.33, // lightest
  '300': -0.21, // lighter
  '400': -0.1,  // light
  '500': 0,
  '600': 0.1,   // dark
  '700': 0.16,  // darker
  '800': 0.22,  // darkest
  '900': 0.5,   // black
  ...globalThis.storefront_color_variants,
};
const colorCSSVars: Record<string, string> = {};
Object.keys(brandColors).forEach((colorName) => {
  const color = Color(brandColors[colorName]);
  Object.keys(colorVariants).forEach((colorVariant) => {
    const colorShift = colorVariants[colorVariant];
    const colorLabel = `${colorName}-${colorVariant}`;
    colorCSSVars[colorLabel] = color.darken(colorShift).hex();
    if (Number(colorVariant) > 100 && Number(colorVariant) < 900) {
      colorCSSVars[`${colorLabel}-yiq`] = color.isLight()
        ? 'var(--yiq-text-dark)' : 'var(--yiq-text-light)';
      colorCSSVars[`${colorLabel}-rgb`] = `${color.red()}, ${color.green()}, ${color.blue()}`;
    }
  });
});
---

<body>
  <slot />
  <script>
    import { registerSW } from 'virtual:pwa-register';
    import { initializeApp } from 'firebase/app';
    registerSW();
    const firebaseConfig = window.firebaseConfig || {
      apiKey: "AIzaSyCrVzemDgpyp9i6ni7Yc5ZuEVfXYwl-4J0",
      authDomain: "ecom2-002.firebaseapp.com",
      projectId: "ecom2-002",
      storageBucket: "ecom2-002.appspot.com",
      messagingSenderId: "402807248219",
      appId: "1:402807248219:web:cf7d57759751e74776367e",
      measurementId: "G-SC592CE0GB"
    };
    initializeApp(firebaseConfig);
  </script>
  <slot name="before-body-end" />
</body>

<style is:global define:vars={colorCSSVars}>
:root {
  --content-max-width: 80rem;
  --white: #fff;
  --gray-50: #f9fafb;
  --gray-200: #e5e7eb;
  --gray-400: #94a3b8;
  --gray-600: #4b5563;
  --gray-700: #374151;
  --gray-800: #1f2937;
  --gray-900: #111827;
  --gray: var(--gray-600);
  --gray-accent: var(--gray-800);
  --surface-color: var(--gray-50);
  --surface-border-color: var(--gray-200);
  --yiq-text-light: var(--white);
  --yiq-text-dark: var(--gray-900);
}
body {
  --primary: var(--primary-500);
  --primary-hover: var(--primary-700);
  --primary-focus: rgba(var(--primary-200-rgb), 0.2);
  --primary-inverse: var(--primary-500-yiq);
  --secondary: var(--secondary-500);
  --secondary-hover: var(--secondary-700);
  --secondary-focus: rgba(var(--secondary-200-rgb), 0.2);
  --secondary-inverse: var(--secondary-500-yiq);
}
@media only screen and (prefers-color-scheme: dark) {
  :root:not([data-theme=light]) {
    --gray: var(--gray-400);
    --gray-accent: var(--gray-200);
    --surface-color: var(--gray-800);
    --surface-border-color: var(--gray-700);
  }
  :root:not([data-theme=light]) a:not([role=button]) {
    --color: var(--primary-100);
  }
  :root:not([data-theme=light]) a:not([role=button]):is([aria-current], :hover, :active, :focus) {
    --color: var(--primary-300);
  }
}
body {
  overflow-x: hidden;
}
</style>
