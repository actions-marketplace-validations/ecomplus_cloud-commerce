---
import type { Categories } from '@cloudcommerce/api/types';
import type CmsHeader from '../../types/cms-header';
import type CmsContacts from '../../types/cms-contacts';
import type { PageContext } from '../ssr-context';
import getImage from '../helpers/image';
import TopBar, { Props as TopBarProps } from '../components/TopBar.vue';
import TheHeader from '../components/TheHeader.vue';

export interface Props {
  pageContext: PageContext;
  topBarProps?: Partial<TopBarProps>;
  logoTransform?: {
    width?: number;
    height?: number;
    quality?: number;
  };
}

declare global {
  var TopBarProps: TopBarProps;
}

const {
  pageContext: {
    apiState,
    settings,
    cms,
  },
  topBarProps,
  logoTransform,
} = Astro.props as Props;
const header = cms('header') as CmsHeader;
const contacts = cms('contacts') as CmsContacts;
const customThemeName = settings.theme.custom || '';

let headerCategories: Array<{ slug: string, name: string }> = [];
let isCategoriesNavFull: boolean | undefined;
if (header.categories_list) {
  if (header.categories_list.featured.length) {
    // Selected categories/collections/brands
    headerCategories = header.categories_list.featured.map((pathAndName) => {
      const [path, name] = pathAndName.split('?');
      return { slug: path.slice(1), name };
    });
  }
  if (header.categories_list.random) {
    const mainCategories: Categories[] | undefined = apiState
      .categories?.filter(({ parent }) => (!parent || !parent.slug));
    if (mainCategories) {
      for (let i = 0; i < header.categories_list.random && i < mainCategories.length; i++) {
        if (!headerCategories.find(({ slug }) => mainCategories[i].slug === slug)) {
          headerCategories.push({
            slug: mainCategories[i].slug,
            name: mainCategories[i].name,
          });
        }
      }
    }
  }
  isCategoriesNavFull = header.categories_list.full_width;
}
const hasMegamenu: boolean | undefined = header.desktop_megamenu;
const isAlphabeticalOrderSubmenu: boolean | undefined = header.alphabetical_order_submenu;
const isFullWidthSubmenu: boolean | undefined = header.full_width_submenu;

globalThis.TopBarProps = {
  marketingStripe: header.marketing_stripe,
  pageLinks: header.contacts_stripe.pages,
  hasPhoneLinks: header.contacts_stripe.phone_wpp,
  hasNetworkLinks: header.contacts_stripe.socials,
  contacts,
  ...Astro.props.topBarProps,
};

const logoWebpAttrs = await getImage({
  src: settings.logo,
  width: 150,
  format: 'webp',
  quality: 100,
  ...logoTransform,
});
---

<slot name="top-bar">
  <TopBar {...globalThis.TopBarProps} />
</slot>
<slot name="header">
  <TheHeader>
    <img slot="logo" {...logoWebpAttrs} alt={`${settings.name} (logo)`} />
  </TheHeader>
</slot>
